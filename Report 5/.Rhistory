type = "response",
se.fit = TRUE
)
pred <- predict(
bart_fit_new,
newdata = data.frame(
pct_urban = df_250K$pct_urban,
density_hsa      = df_250K$density_hsa,
population_state = df_250K$population_state,
pop_ratio        = df_250K$pop_ratio,
diff_peak_week   = df_250k$diff_peak_week,
diff_peak_magnitude = df_250k$diff_peak_magnitude,
rel_diff_peak_magnitude = df_250k$rel_diff_peak_magnitude
),
type = "response",
se.fit = TRUE
)
df_250 <- us_map %>%
filter(population_hsa >= 250000) %>%
select(state, hsa_nci_id, population_hsa, population_state, density_state,
density_hsa, pct_urban, pop_ratio, geometry_hsa, geometry) %>%
distinct() %>%
distinct() %>%
left_join(df_new %>%
ungroup() %>%
filter(season == '2023/24') %>%
select(state, hsa_nci_id, diff_wis_season, diff_peak_week, diff_peak_magnitude, rel_diff_peak_magnitude),
by = c("state", "hsa_nci_id"))
pred <- predict(
bart_fit_new,
newdata = data.frame(
pct_urban = df_250$pct_urban,
density_hsa      = df_250$density_hsa,
population_state = df_250$population_state,
pop_ratio        = df_250$pop_ratio,
diff_peak_week   = df_250$diff_peak_week,
diff_peak_magnitude = df_250$diff_peak_magnitude,
rel_diff_peak_magnitude = df_250$rel_diff_peak_magnitude
),
type = "response",
se.fit = TRUE
)
pred <- predict(
bart_fit_new,
newdata = data.frame(
pct_urban = df_250$pct_urban,
density_hsa      = df_250$density_hsa
density_state = df_250$density_state,
pred <- predict(
bart_fit_new,
newdata = data.frame(
pct_urban = df_250$pct_urban,
density_hsa      = df_250$density_hsa,
density_state = df_250$density_state,
population_state = df_250$population_state,
pop_ratio        = df_250$pop_ratio,
diff_peak_week   = df_250$diff_peak_week,
diff_peak_magnitude = df_250$diff_peak_magnitude,
rel_diff_peak_magnitude = df_250$rel_diff_peak_magnitude
),
type = "response",
se.fit = TRUE
)
View(pred)
View(pred)
pred$fit
pred$se.fit
pred
head(pred)
df_pred <- df_250K %>%
mutate(
diff_wis_h3_hat = as.numeric(pred$fit),
se_hat          = as.numeric(pred$se.fit),
lwr95           = diff_wis_h3_hat - 1.96 * se_hat,
upr95           = diff_wis_h3_hat + 1.96 * se_hat
)
df_pred <- df_250 %>%
mutate(
diff_wis_h3_hat = as.numeric(pred$fit),
se_hat          = as.numeric(pred$se.fit),
lwr95           = diff_wis_h3_hat - 1.96 * se_hat,
upr95           = diff_wis_h3_hat + 1.96 * se_hat
)
View(df_250)
View(df_250)
us_map = readRDS("../us_map_pop_sf.rds")
df_250 <- us_map %>%
filter(population_hsa >= 250000) %>%
select(state, hsa_nci_id, population_hsa, population_state, density_state,
density_hsa, pct_urban, pop_ratio, geometry_hsa, geometry) %>%
distinct() %>%
distinct() %>%
left_join(df_new %>%
ungroup() %>%
filter(season == '2023/24') %>%
select(state, hsa_nci_id, diff_wis_season, diff_peak_week, diff_peak_magnitude, rel_diff_peak_magnitude),
by = c("state", "hsa_nci_id"))
pred <- predict(bart_fit_new, newdata = df_250)
df_pred <- df_250 %>%
mutate(
diff_wis_h3_hat = apply(pred, 2, mean),          # posterior mean
lwr95           = apply(pred, 2, quantile, 0.025),# 2.5% posterior quantile
upr95           = apply(pred, 2, quantile, 0.975) # 97.5% posterior quantile
)
df_pred <- df_250 %>%
mutate(
diff_wis_h3_hat = apply(pred, 2, mean),          # posterior mean
lwr95           = apply(pred, 2, quantile, 0.025), # 2.5% posterior quantile
upr95           = apply(pred, 2, quantile, 0.975)  # 97.5% posterior quantile
)
us_map = readRDS("../us_map_pop_sf.rds")
df_250 <- us_map %>%
filter(population_hsa >= 250000) %>%
select(state, hsa_nci_id, population_hsa, population_state, density_state,
density_hsa, pct_urban, pop_ratio, geometry_hsa, geometry) %>%
distinct() %>%
distinct() %>%
left_join(df_new %>%
ungroup() %>%
filter(season == '2023/24') %>%
select(state, hsa_nci_id, diff_wis_season, diff_peak_week, diff_peak_magnitude, rel_diff_peak_magnitude),
by = c("state", "hsa_nci_id"))
pred <- predict(bart_fit_new, newdata = df_250)
df_pred <- df_250 %>%
mutate(
diff_wis_season_hat = apply(pred, 2, mean),          # posterior mean
lwr95           = apply(pred, 2, quantile, 0.025), # 2.5% posterior quantile
upr95           = apply(pred, 2, quantile, 0.975)  # 97.5% posterior quantile
)
nrow(df_250)
ncol(pred)
summary(df_250[ , c("pop_ratio","pct_urban","density_state",
"density_hsa","diff_peak_week",
"diff_peak_magnitude","rel_diff_peak_magnitude")])
us_map = readRDS("../us_map_pop_sf.rds")
df_250 <- us_map %>%
filter(population_hsa >= 250000) %>%
select(state, hsa_nci_id, population_hsa, population_state, density_state,
density_hsa, pct_urban, pop_ratio, geometry_hsa, geometry) %>%
distinct() %>%
distinct() %>%
left_join(df_new %>%
ungroup() %>%
filter(season == '2023/24') %>%
select(state, hsa_nci_id, diff_wis_season, diff_peak_week, diff_peak_magnitude, rel_diff_peak_magnitude),
by = c("state", "hsa_nci_id"))
df_250_complete <- df_250 %>%
drop_na(diff_peak_week,
diff_peak_magnitude,
rel_diff_peak_magnitude)
pred <- predict(bart_fit_new, newdata = df_250_complete)
df_pred <- df_250_complete %>%
mutate(
diff_wis_season_hat = apply(pred, 2, mean),
lwr95               = apply(pred, 2, quantile, 0.025),
upr95               = apply(pred, 2, quantile, 0.975)
)
#all_inc <- read.csv("Local-level-forecasting/data/hsa_state_inc.csv")
all_inc <- readr::read_csv("hsa_state_inc.csv", show_col_types = FALSE)
avail_hsa <- all_inc %>%
select(state, hsa_nci_id, week_end) %>%
group_by(state, hsa_nci_id) %>%
summarise(max_week_end = max(week_end),
min_week_end = min(week_end),
n = n()) %>%
filter(max_week_end == '2025-07-26')
lower48 <- c(state.name, "District of Columbia")  # 48 states  + DC
lower48 <- setdiff(lower48, c("Alaska", "Hawaii")) # not include Alaska and Hawaii
df_conus <- df_pred %>%
filter(state %in% lower48) %>%
mutate(available = ifelse(is.na(diff_wis_season), 1, 0))
us_map1 <- us_map %>%
filter(state %in% lower48) %>%
left_join(avail_hsa %>%
filter(n == 148), by = c("state", "hsa_nci_id")) %>%
mutate(available = ifelse(is.na(n), 0, 1))
# ggplot() +
#   geom_sf(data = sf::st_set_geometry(sf::st_as_sf(us_map1), "geometry_hsa"),
#           aes(fill = factor(available)), color = 'gray20') +
#   geom_sf(data = sf::st_set_geometry(sf::st_as_sf(us_map1), "geometry"),
#           fill = NA, color = "grey20", linewidth = 0.25) +
#   scale_fill_manual(values = c("0" = "white", "1" = "skyblue"),
#                     name = "",
#                     labels = c("Not in Data", "HSA in Data")) +
#   coord_sf() +
#   theme_void() +
#   theme(
#     legend.text  = element_text(size = 20)
#   )
ggplot() +
geom_sf(data = sf::st_set_geometry(sf::st_as_sf(df_conus), "geometry_hsa"),
aes(fill = diff_wis_h3), color = 'gray20') +
geom_sf(data = sf::st_set_geometry(sf::st_as_sf(us_map1), "geometry_hsa"),
fill = NA, color = 'gray20') +
geom_sf(data = sf::st_set_geometry(sf::st_as_sf(us_map1), "geometry"),
fill = NA, color = "grey20", linewidth = 0.25) +
scale_fill_viridis_c(option = "magma", direction = 1, na.value = "white",
name = "diff wis h3") +
coord_sf() + theme_void() +
labs(title = "diff wis h3")
#all_inc <- read.csv("Local-level-forecasting/data/hsa_state_inc.csv")
all_inc <- readr::read_csv("hsa_state_inc.csv", show_col_types = FALSE)
avail_hsa <- all_inc %>%
select(state, hsa_nci_id, week_end) %>%
group_by(state, hsa_nci_id) %>%
summarise(max_week_end = max(week_end),
min_week_end = min(week_end),
n = n()) %>%
filter(max_week_end == '2025-07-26')
lower48 <- c(state.name, "District of Columbia")  # 48 states  + DC
lower48 <- setdiff(lower48, c("Alaska", "Hawaii")) # not include Alaska and Hawaii
df_conus <- df_pred %>%
filter(state %in% lower48) %>%
mutate(available = ifelse(is.na(diff_wis_season), 1, 0))
us_map1 <- us_map %>%
filter(state %in% lower48) %>%
left_join(avail_hsa %>%
filter(n == 148), by = c("state", "hsa_nci_id")) %>%
mutate(available = ifelse(is.na(n), 0, 1))
# ggplot() +
#   geom_sf(data = sf::st_set_geometry(sf::st_as_sf(us_map1), "geometry_hsa"),
#           aes(fill = factor(available)), color = 'gray20') +
#   geom_sf(data = sf::st_set_geometry(sf::st_as_sf(us_map1), "geometry"),
#           fill = NA, color = "grey20", linewidth = 0.25) +
#   scale_fill_manual(values = c("0" = "white", "1" = "skyblue"),
#                     name = "",
#                     labels = c("Not in Data", "HSA in Data")) +
#   coord_sf() +
#   theme_void() +
#   theme(
#     legend.text  = element_text(size = 20)
#   )
ggplot() +
geom_sf(data = sf::st_set_geometry(sf::st_as_sf(df_conus), "geometry_hsa"),
aes(fill = diff_wis_season), color = 'gray20') +
geom_sf(data = sf::st_set_geometry(sf::st_as_sf(us_map1), "geometry_hsa"),
fill = NA, color = 'gray20') +
geom_sf(data = sf::st_set_geometry(sf::st_as_sf(us_map1), "geometry"),
fill = NA, color = "grey20", linewidth = 0.25) +
scale_fill_viridis_c(option = "magma", direction = 1, na.value = "white",
name = "diff wis h3") +
coord_sf() + theme_void() +
labs(title = "diff wis h3")
unavail_hsa <- us_map1 %>%
as.data.frame() %>%              # 혹시 tibble이면 sf 변환 위해
sf::st_as_sf() %>%
sf::st_set_geometry("geometry_hsa") %>%
dplyr::filter(available == 0, population_hsa > 250000)
ggplot() +
geom_sf(data = sf::st_set_geometry(sf::st_as_sf(df_conus), "geometry_hsa"),
aes(fill = diff_wis_h3_hat), color = 'gray20') +
geom_sf(data = sf::st_set_geometry(sf::st_as_sf(us_map1), "geometry"),
fill = NA, color = "grey20", linewidth = 0.25) +
geom_sf(data = sf::st_set_geometry(sf::st_as_sf(us_map1), "geometry_hsa"),
fill = NA, color = 'gray20') +
geom_sf(data = unavail_hsa,
fill = NA, color = "red", linewidth = 0.5) +
scale_fill_viridis_c(option = "magma", direction = 1, na.value = "white",
name = "Prediction",
limits = c(min(df_pred$diff_wis_h3, na.rm = TRUE),
max(df_pred$diff_wis_h3, na.rm = TRUE))) +
coord_sf() + theme_void() +
labs(title = "Prediction")
#all_inc <- read.csv("Local-level-forecasting/data/hsa_state_inc.csv")
all_inc <- readr::read_csv("hsa_state_inc.csv", show_col_types = FALSE)
avail_hsa <- all_inc %>%
select(state, hsa_nci_id, week_end) %>%
group_by(state, hsa_nci_id) %>%
summarise(max_week_end = max(week_end),
min_week_end = min(week_end),
n = n()) %>%
filter(max_week_end == '2025-07-26')
lower48 <- c(state.name, "District of Columbia")  # 48 states  + DC
lower48 <- setdiff(lower48, c("Alaska", "Hawaii")) # not include Alaska and Hawaii
df_conus <- df_pred %>%
filter(state %in% lower48) %>%
mutate(available = ifelse(is.na(diff_wis_season), 1, 0))
us_map1 <- us_map %>%
filter(state %in% lower48) %>%
left_join(avail_hsa %>%
filter(n == 148), by = c("state", "hsa_nci_id")) %>%
mutate(available = ifelse(is.na(n), 0, 1))
# ggplot() +
#   geom_sf(data = sf::st_set_geometry(sf::st_as_sf(us_map1), "geometry_hsa"),
#           aes(fill = factor(available)), color = 'gray20') +
#   geom_sf(data = sf::st_set_geometry(sf::st_as_sf(us_map1), "geometry"),
#           fill = NA, color = "grey20", linewidth = 0.25) +
#   scale_fill_manual(values = c("0" = "white", "1" = "skyblue"),
#                     name = "",
#                     labels = c("Not in Data", "HSA in Data")) +
#   coord_sf() +
#   theme_void() +
#   theme(
#     legend.text  = element_text(size = 20)
#   )
ggplot() +
geom_sf(data = sf::st_set_geometry(sf::st_as_sf(df_conus), "geometry_hsa"),
aes(fill = diff_wis_season), color = 'gray20') +
geom_sf(data = sf::st_set_geometry(sf::st_as_sf(us_map1), "geometry_hsa"),
fill = NA, color = 'gray20') +
geom_sf(data = sf::st_set_geometry(sf::st_as_sf(us_map1), "geometry"),
fill = NA, color = "grey20", linewidth = 0.25) +
scale_fill_viridis_c(option = "magma", direction = 1, na.value = "white",
name = "diff wis season") +
coord_sf() + theme_void() +
labs(title = "diff wis season")
unavail_hsa <- us_map1 %>%
as.data.frame() %>%              # 혹시 tibble이면 sf 변환 위해
sf::st_as_sf() %>%
sf::st_set_geometry("geometry_hsa") %>%
dplyr::filter(available == 0, population_hsa > 250000)
ggplot() +
geom_sf(data = sf::st_set_geometry(sf::st_as_sf(df_conus), "geometry_hsa"),
aes(fill = diff_wis_season_hat), color = 'gray20') +
geom_sf(data = sf::st_set_geometry(sf::st_as_sf(us_map1), "geometry"),
fill = NA, color = "grey20", linewidth = 0.25) +
geom_sf(data = sf::st_set_geometry(sf::st_as_sf(us_map1), "geometry_hsa"),
fill = NA, color = 'gray20') +
geom_sf(data = unavail_hsa,
fill = NA, color = "red", linewidth = 0.5) +
scale_fill_viridis_c(option = "magma", direction = 1, na.value = "white",
name = "Prediction",
limits = c(min(df_pred$diff_wis_season, na.rm = TRUE),
max(df_pred$diff_wis_season, na.rm = TRUE))) +
coord_sf() + theme_void() +
labs(title = "Prediction")
pred_new = ggplot(bart_predictions_new, aes(x = estimate, y = observed)) +
geom_errorbar(aes(ymin = ci_low, ymax = ci_high), width = 0, alpha = 0.35) +
geom_point(alpha = 0.7) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
labs(x = "Predicted diff_wis_season", y = "Observed diff_wis_season",
title = "Observed vs Predicted with 95% Prediction Intervals (season)",
subtitle = sprintf("95%% coverage = %.1f%% (n=%d)", 100*coverage_95_bart_new, nrow(bart_predictions_new))) +
theme_minimal() + scale_x_continuous(breaks=seq(-1,2,by=0.25))
pred_new2 = ggplot(bart_predictions_new2, aes(x = estimate, y = observed)) +
geom_errorbar(aes(ymin = ci_low, ymax = ci_high), width = 0, alpha = 0.35) +
geom_point(alpha = 0.7) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
labs(x = "Predicted diff_wis_overall", y = "Observed diff_wis_overall",
title = "Observed vs Predicted with 95% Prediction Intervals (overall)",
subtitle = sprintf("95%% coverage = %.1f%% (n=%d)", 100*coverage_95_bart_new2, nrow(bart_predictions_new2))) +
theme_minimal() + scale_x_continuous(breaks=seq(-1,2,by=0.25))
pred_old = ggplot(bart_predictions, aes(x = estimate, y = observed)) +
geom_errorbar(aes(ymin = ci_low, ymax = ci_high), width = 0, alpha = 0.35) +
geom_point(alpha = 0.7) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
labs(x = "Predicted diff_wis_overall", y = "Observed diff_wis_overall",
title = "Observed vs Predicted with 95% Prediction Intervals (old)",
subtitle = sprintf("95%% coverage = %.1f%% (n=%d)", 100*coverage_95_bart, nrow(bart_predictions))) +
theme_minimal() + scale_x_continuous(breaks=seq(-1,2,by=0.25))
(pred_old + coord_cartesian(xlim = c(-0.25, 1.5))) / (pred_new + coord_cartesian(xlim = c(-0.25, 1.5))) / (pred_new2 + coord_cartesian(xlim = c(-0.25, 1.5)))
library(ggplot2)
library(sf)
#all_inc <- read.csv("Local-level-forecasting/data/hsa_state_inc.csv")
all_inc <- readr::read_csv("hsa_state_inc.csv", show_col_types = FALSE)
avail_hsa <- all_inc %>%
select(state, hsa_nci_id, week_end) %>%
group_by(state, hsa_nci_id) %>%
summarise(max_week_end = max(week_end),
min_week_end = min(week_end),
n = n()) %>%
filter(max_week_end == '2025-07-26')
lower48 <- c(state.name, "District of Columbia")  # 48 states  + DC
lower48 <- setdiff(lower48, c("Alaska", "Hawaii")) # not include Alaska and Hawaii
df_conus <- df_pred %>%
filter(state %in% lower48) %>%
mutate(available = ifelse(is.na(diff_wis_h3), 1, 0))
rmse
library(ggplot2)
library(patchwork)
library(dplyr)
library(ggplot2)
all_metric2 <- read.csv("Local-Level-Forecasting/data/forecasting_metrics_overall.csv")
all_metric2 <- read.csv("../forecasting_metrics_overall.csv")
all_metric2 <- read.csv("../forecasting_metrics_overall.csv")
us_hsa_county_popdesc <- read.csv("../us_hsa_county_popdesc.csv")
us_hsa_county_popdesc <- read.csv("../us_hsa_county_popdesc.csv")
us_hsa_county_popdesc <- read.csv(".../us_hsa_county_popdesc.csv")
all_metric2 <- read.csv(".../forecasting_metrics_overall.csv")
all_metric2 <- read.csv("../forecasting_metrics_overall.csv")
us_hsa_county_popdesc <- read.csv("../us_hsa_county_popdesc.csv")
library(dplyr)
library(ggplot2)
all_metric2 <- read.csv("../forecasting_metrics_overall.csv")
library(dplyr)
library(ggplot2)
all_metric2 <- read.csv("../forecasting_metrics_overall.csv")
library(dplyr)
library(ggplot2)
all_metric2 <- read.csv("../forecasting_metrics_overall.csv")
library(dplyr)
library(ggplot2)
all_metric2 <- read.csv("../forecasting_metrics_overall.csv")
library(dplyr)
library(ggplot2)
all_metric2 <- read.csv("../forecasting_metrics_overall.csv")
setwd()
getwd()
setwd("C:\Users\advay\My Drive\UT Notes\Research\MeyersLab\Report 5")
setwd("C:\\Users\\advay\\My Drive\\UT Notes\\Research\\MeyersLab\\Report 5")
getwd()
library(dplyr)
library(ggplot2)
all_metric2 <- read.csv("../forecasting_metrics_overall.csv")
us_hsa_county_popdesc <- read.csv("../us_hsa_county_popdesc.csv")
us_hsa_county_popdesc_bygroup <- us_hsa_county_popdesc %>%
select(state, hsa_nci_id, area_km2_hsa, area_km2_state, n_hsa) %>%
distinct()
all_metric <- all_metric2 %>%
left_join(us_hsa_county_popdesc_bygroup, by = c("state", "hsa_nci_id"))
tmp <- all_metric %>%
filter(season == "2023/24", horizon == 3) %>%
distinct()
coverage_hist_plot <- function(df_pred){
coverage_95 <- mean(df_pred$diff_wis_overall >= df_pred$lwr95 & df_pred$diff_wis_overall <= df_pred$upr95, na.rm = TRUE)
message(sprintf("95%% coverage = %.1f%% (n=%d)", 100*coverage_95, nrow(df_pred)))
p1 <- ggplot(df_pred, aes(x = diff_wis_overall_pred, y = diff_wis_overall)) +
geom_errorbar(aes(ymin = lwr95, ymax = upr95), width = 0, alpha = 0.35) +
geom_point(alpha = 0.7) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
labs(x = "Predicted", y = "Observed",
#title = "Observed vs Predicted with 95% Prediction Intervals",
title = sprintf("95%% coverage = %.1f%% (n=%d)", 100*coverage_95, nrow(df_pred))) +
theme_minimal() +theme(
panel.spacing = unit(0, "mm"),
legend.position = "bottom",
axis.text = element_text(size = 15),
axis.title = element_text(size = 20, face = "bold"),
strip.text = element_text(size = 15),
plot.title = element_text(size = 20)
)
print(p1)
x <- df_pred$diff_wis_overall_pred
y <- df_pred$diff_wis_overall
brks <- pretty(range(c(x, y), na.rm = TRUE), n = 30)
hist(x, breaks = brks, freq = FALSE,
col = adjustcolor("steelblue", 0.4), border = NA,
xlab = "diff_wis_overall", main = "Histogram overlap")
hist(y, breaks = brks, freq = FALSE,
col = adjustcolor("tomato", 0.4), border = NA, add = TRUE)
legend("topright", fill = c(adjustcolor("steelblue",0.4), adjustcolor("tomato",0.4)),
border = NA, legend = c("Predicted (mean)", "Observed"))
}
### LM
lm_fit <- lm(diff_wis_overall~pop_ratio + pct_urban + log(area_km2_state) + log(area_km2_hsa) + log(density_state) + log(density_hsa) +
n_hsa + log(population_state), data = tmp)
lm_fit <- lm(diff_wis_overall~pct_urban + log(area_km2_state) + log(area_km2_hsa) +
n_hsa + log(population_state) + log(population_hsa), data = tmp)
summary(lm_fit)
step(lm_fit)
#lm_final <- lm(formula = diff_wis_overall ~ pct_urban + pop_ratio, data = tmp)
lm_final <- lm(formula = diff_wis_overall ~ pct_urban + n_hsa, data = tmp)
summary(lm_final)
pred <- predict(lm_final, newdata = tmp, interval = "prediction", se.fit = TRUE)
#pred <- predict(lm_final, se.fit = TRUE)  # return $fit, $se.fit, $residual.scale
df_pred_lm <- cbind(
tmp,
diff_wis_overall_pred = pred$fit[, "fit"],
se_hat = as.numeric(pred$se.fit),
lwr95 = pred$fit[, "fit"] - 1.96 * pred$se.fit,
upr95 = pred$fit[, "fit"] + 1.96 * pred$se.fit,
lwr95_pi = pred$fit[, "lwr"], #pred$fit - 1.96 * pred$se.fit,
upr95_pi = pred$fit[, "upr"] #pred$fit + 1.96 * pred$se.fit
)
coverage_hist_plot(df_pred_lm)
### GAM
library(mgcv)
fit_gam <- gam(diff_wis_overall~
s(pop_ratio)
+ s(pct_urban)
#+ s(log(area_km2_state))
#+ s(log(area_km2_hsa))
#+ s(log(density_state))
#+ s(log(density_hsa))
#+ s(n_hsa)
#+ s(log(population_state))
#+ pop_ratio
#+log(density_state)
#+ log(area_km2_hsa)
, data = tmp)
summary(fit_gam)
fit_gam <- gam(diff_wis_overall~
#  s(pop_ratio)
+ s(pct_urban)
#+ s(log(area_km2_state))
#+ s(log(area_km2_hsa))
#+ s(log(density_state))
#+ s(log(density_hsa))
+ s(n_hsa)
#+ s(log(population_state))
#+ pop_ratio
#+log(density_state)
#+ log(area_km2_hsa)
, data = tmp)
summary(fit_gam)
plot(fit_gam, shade = TRUE, select = 1); abline(h = 0, col = "red", lty = 2)
plot(fit_gam, shade = TRUE, select = 2); abline(h = 0, col = "red", lty = 2)
pred <- predict(fit_gam, se.fit = TRUE)  # return $fit, $se.fit, $residual.scale 등 반환
#pred <- predict(fit_gam, newdata = tmp, se.fit = TRUE, type = "response")
#sigma <- sqrt(summary(fit_gam)$scale)
#tval  <- qt(0.975, df = fit_gam$df.residual)
df_pred_gam <- cbind(
tmp,
diff_wis_overall_pred = as.numeric(pred$fit),
sigma = sqrt(summary(fit_gam)$scale),
tval  = qt(0.975, df = fit_gam$df.residual),
se_hat = as.numeric(pred$se.fit),
lwr95 = pred$fit - 1.96 * pred$se.fit,
upr95 = pred$fit + 1.96 * pred$se.fit,
lwr95_pi = pred$fit - tval * sqrt(pred$se.fit^2 + sigma^2),
upr95_pi = pred$fit + tval * sqrt(pred$se.fit^2 + sigma^2)
)
