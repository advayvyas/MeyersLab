labs(title = "Bootstrapped sampling distribution of routine checkup coefficient", x = "Routine Checkup (%)", y = "Frequency") + theme_bw()
View(checkup_boot)
View(checkup_boot)
names(checkup_boot)
names(checkup_boot)[1] = "routine_checkup"
names(checkup_boot)[1]
ggplot(checkup_boot) + geom_histogram(aes(x=routine_checkup), color = "black", fill = "skyblue", bins=50) +
geom_vline(xintercept=mean(checkup_boot$routine_checkup), color = "red") +
labs(title = "Bootstrapped sampling distribution of routine checkup coefficient", x = "Routine Checkup (%)", y = "Frequency") + theme_bw()
mean(checkup_boot$routine_checkup)
ggplot(checkup_boot) + geom_histogram(aes(x=routine_checkup), color = "black", fill = "skyblue", bins=50) +
geom_vline(xintercept=mean(checkup_boot$routine_checkup, na.rm = TRUE), color = "red") +
labs(title = "Bootstrapped sampling distribution of routine checkup coefficient", x = "Routine Checkup (%)", y = "Frequency") + theme_bw()
ggplot(checkup_boot) + geom_histogram(aes(x=routine_checkup), color = "black", fill = "skyblue", bins=40) +
geom_vline(xintercept=mean(checkup_boot$routine_checkup, na.rm = TRUE), color = "red") +
labs(title = "Bootstrapped sampling distribution of routine checkup coefficient", x = "Routine Checkup (%)", y = "Frequency") + theme_bw()
ggplot(checkup_boot) + geom_histogram(aes(x=routine_checkup), color = "black", fill = "skyblue", bins=50) +
geom_vline(xintercept=mean(checkup_boot$routine_checkup, na.rm = TRUE), color = "red") +
labs(title = "Bootstrapped sampling distribution of routine checkup coefficient", x = "Routine Checkup (%)", y = "Frequency") + theme_bw()
is.na(checkup_boot)
table(is.na(checkup_boot))
ggplot(checkup_boot) + geom_histogram(aes(x=routine_checkup), color = "black", fill = "skyblue", bins=50) +
geom_vline(xintercept=mean(checkup_boot$routine_checkup, na.rm = TRUE), color = "red") +
labs(title = "Bootstrapped sampling distribution of routine checkup coefficient", x = "Routine Checkup (%)", y = "Frequency") + theme_bw()
mean(checkup_boot$routine_checkup, na.rm = TRUE)
lm(patients_per_100k ~ `Routine Checkup (%)`, data = mosaic::resample(first_spike[c(1,3:8),]))
lm(patients_per_100k ~ `Routine Checkup (%)`, data = mosaic::resample(first_spike[c(1,3:8),]))
lm(patients_per_100k ~ `Routine Checkup (%)`, data = mosaic::resample(first_spike[c(1,3:8),]))
lm(patients_per_100k ~ `Routine Checkup (%)`, data = (first_spike[c(1,3:8),]))
confint(coverage_boot$coverage_rate)
confint(checkup_boot$routine_checkup)
confint(checkup_boot$routine_checkup, na.rm = TRUE)
checkup_boot = na.rm(checkup_boot)
checkup_boot = na.omit(checkup_boot)
confint(checkup_boot$routine_checkup, na.rm = TRUE)
ggplot(checkup_boot) + geom_histogram(aes(x=routine_checkup), color = "black", fill = "skyblue", bins=50) +
geom_vline(xintercept=mean(checkup_boot$routine_checkup), color = "red") +
labs(title = "Bootstrapped sampling distribution of routine checkup coefficient", x = "Routine Checkup (%)", y = "Frequency") + theme_bw()
ggplot(checkup_boot) + geom_histogram(aes(x=routine_checkup), color = "black", fill = "skyblue", bins=50) +
geom_vline(xintercept=mean(checkup_boot$routine_checkup), color = "red") +
labs(title = "Bootstrapped sampling distribution of routine_checkup coefficient", x = "routine_checkup", y = "Frequency") + theme_bw()
round(mean(checkup_boot$routine_checkup), 2)
ggplot(checkup_boot) + geom_histogram(aes(x=routine_checkup), color = "black", fill = "skyblue", bins=50) +
geom_vline(xintercept=mean(checkup_boot$routine_checkup), color = "red") +
labs(title = "Bootstrapped sampling distribution of routine_checkup coefficient", x = "routine_checkup", y = "Frequency") + theme_bw()
ggplot(checkup_boot) + geom_histogram(aes(x=routine_checkup), color = "black", fill = "skyblue", bins=50) +
geom_vline(xintercept=mean(checkup_boot$routine_checkup), color = "red") +
labs(title = "Bootstrapped sampling distribution of routine_checkup coefficient", x = "routine_checkup", y = "Frequency") + theme_bw()
ggplot(coverage_boot) + geom_histogram(aes(x=coverage_rate), color = "black", fill = "skyblue", bins=50) +
geom_vline(xintercept=mean(coverage_boot$coverage_rate), color = "red") +
labs(title = "Bootstrapped sampling distribution of coverage_rate coefficient", x = "coverage_rate", y = "Frequency") + theme_bw()
ggplot(checkup_boot) + geom_histogram(aes(x=routine_checkup), color = "black", fill = "skyblue", bins=50) +
geom_vline(xintercept=mean(checkup_boot$routine_checkup), color = "red") +
labs(title = "Bootstrapped sampling distribution of routine_checkup coefficient", x = "routine_checkup", y = "Frequency") + theme_bw()
ggplot(coverage_boot) + geom_histogram(aes(x=coverage_rate), color = "black", fill = "skyblue", bins=50) +
geom_vline(xintercept=mean(coverage_boot$coverage_rate), color = "red") +
labs(title = "Bootstrapped sampling distribution of coverage_rate coefficient", x = "coverage_rate", y = "Frequency") + theme_bw()
ggplot(checkup_boot) + geom_histogram(aes(x=routine_checkup), color = "black", fill = "skyblue", bins=50) +
geom_vline(xintercept=mean(checkup_boot$routine_checkup), color = "red") +
labs(title = "Bootstrapped sampling distribution of routine_checkup coefficient", x = "routine_checkup", y = "Frequency") + theme_bw()
ggplot(checkup_boot) + geom_histogram(aes(x=routine_checkup), color = "black", fill = "skyblue", bins=50) +
geom_vline(xintercept=mean(checkup_boot$routine_checkup), color = "red") +
labs(title = "Bootstrapped sampling distribution of routine_checkup coefficient", x = "routine_checkup", y = "Frequency") + theme_bw()
ggplot(checkup_boot) + geom_histogram(aes(x=routine_checkup), color = "black", fill = "skyblue", bins=50) +
geom_vline(xintercept=mean(checkup_boot$routine_checkup), color = "red") +
labs(title = "Bootstrapped sampling distribution of routine_checkup coefficient", x = "routine_checkup", y = "Frequency") + theme_bw()
View(second)
View(second)
knitr::opts_chunk$set(fig.height=8, fig.width=8, fig.align = "center", warning=FALSE, echo=FALSE, tidy=TRUE, tidy.opts=list(width.cutoff=60))
library(dplyr)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(patchwork)
library(corrplot)
library(mosaic)
city_trend_major = read.csv("../texas_city_trend_major.csv")
colnames(city_trend_major) = c("city", "year", "quarter", "total_patients", "population", "patients_per_100k")
ggplot(city_trend_major, aes(x = quarter, y = patients_per_100k, group = city, color = city)) +
geom_line(linewidth = 1,) +
geom_point() +
labs(title = "Flu patients per 100,000 over time by city", x = "Quarter", y = "Patients per 100,000", color = "City") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme_bw()
first_spike = city_trend_major %>% filter(quarter == "2022Q4") %>% select(city, total_patients, population, patients_per_100k)
second_spike = city_trend_major %>% filter(quarter == "2024Q1") %>% select(city, total_patients, population, patients_per_100k)
first = ggplot(first_spike) + geom_col(aes(x = reorder(city, patients_per_100k), y = patients_per_100k), fill = "skyblue", col="black") +
labs(title = "Flu Patients per 100,000 during First Spike (2022 Q4)", x = "City", y = "Flu Patients per 100,000") + theme_bw()
second = ggplot(second_spike) + geom_col(aes(x = reorder(city, patients_per_100k), y = patients_per_100k), fill = "skyblue", col="black") +
labs(title = "Flu Patients per 100,000 during First Spike (2024 Q1)", x = "City", y = "Flu Patients per 100,000") + theme_bw()
first / second
ggplot(city_trend_major %>% filter(quarter == "2022Q4" | quarter == "2024Q1")) + geom_col(aes(x = reorder(city, patients_per_100k), y = patients_per_100k, fill = quarter), position = position_dodge2(preserve = "single"), col="black") +
labs(title = "Flu Patients per 100,000 during Spikes", x = "City", y = "Flu Patients per 100,000", fill = "Quarter") + theme_bw()
city_health = read.csv("../texas_cityhealth.csv") %>% pivot_wider(names_from = Metric, values_from = Value) # 2022
colnames(city_health)[1] = "city"
flu_vax = read.csv("../texas_flu_vax.csv") # 2022
first_spike = first_spike %>% left_join(city_health) %>% left_join(flu_vax[,2:3])
numeric_data = first_spike[sapply(first_spike, is.numeric)]
cor_matrix = cor(numeric_data)
corrplot.mixed(cor_matrix, tl.col = "black", tl.pos = "lt", addgrid.col = TRUE, upper="color", lower="number", diag="l")
ggplot(first_spike, aes(x=coverage_rate, y=patients_per_100k, col=city)) + geom_point(size=2) +
geom_smooth(method = "lm", col = "black", se=FALSE) +
labs(title = "Vaccination Coverage Rate vs. Flu Patients per 100,000", x="Coverage Rate", y="Patients per 100,000", col = "City") + theme_bw()
ggplot(first_spike[c(2:5,7:8),], aes(x=coverage_rate, y=patients_per_100k, col=city)) + geom_point(size=2) +
geom_smooth(method = "lm", col = "black", se=FALSE) +
labs(title = "Vaccination Coverage Rate vs. Flu Patients per 100,000", x="Coverage Rate", y="Patients per 100,000", col = "City") + theme_bw()
ggplot(first_spike, aes(x=`Routine Checkup (%)`, y=patients_per_100k, col=city)) + geom_point(size=2) +
geom_smooth(method = "lm", col = "black", se=FALSE) +
labs(title = "Routine Checkup (%) vs. Flu Patients per 100,000", x=  "Routine Checkup (%)", y ="Patients per 100,000", col = "City") + theme_bw()
ggplot(first_spike[c(1,3:8),], aes(x=`Routine Checkup (%)`, y=patients_per_100k, col=city)) + geom_point(size=2) +
geom_smooth(method = "lm", col = "black", se=FALSE) +
labs(title = "Routine Checkup (%) vs. Flu Patients per 100,000 w/out Austin", x=  "Routine Checkup (%)",
y ="Patients per 100,000", col = "City") + theme_bw()
ggplot(first_spike, aes(x=`Uninsured (%)`, y=patients_per_100k, col=city)) + geom_point(size=2) +
geom_smooth(method = "lm", col = "black", se=FALSE) +
labs(title = "Uninsured (%) vs. Flu Patients per 100,000", x = "Uninsured (%)", y = "Patients per 100,000", col = "City") + theme_bw()
ggplot(first_spike[c(1,3:8),], aes(x=`Uninsured (%)`, y=patients_per_100k, col=city)) + geom_point(size=2) +
geom_smooth(method = "lm", col = "black", se=FALSE) +
labs(title = "Uninsured (%) vs. Flu Patients per 100,000", x = "Uninsured (%)", y = "Patients per 100,000", col = "City") + theme_bw()
View(city_trend_major)
coverage_boot = do(10000) * {
model = lm(patients_per_100k ~ coverage_rate, data = mosaic::resample(first_spike))
coef(model)[2]
}
View(city_trend_major)
first_spike[1]
city_health = read.csv("../texas_cityhealth.csv") %>% pivot_wider(names_from = Metric, values_from = Value) # 2022
first_spike = city_trend_major %>% filter(quarter == "2022Q4") %>% select(city, total_patients, population, patients_per_100k)
city_trend_major = read.csv("../texas_city_trend_major.csv")
colnames(city_trend_major) = c("city", "year", "quarter", "total_patients", "population", "patients_per_100k")
first_spike = city_trend_major %>% filter(quarter == "2022Q4") %>% select(city, total_patients, population, patients_per_100k)
city_health = read.csv("../texas_cityhealth.csv") %>% pivot_wider(names_from = Metric, values_from = Value) # 2022
city_trend_major = read.csv("../texas_city_trend_major.csv")
colnames(city_trend_major) = c("city", "year", "quarter", "total_patients", "population", "patients_per_100k")
first_spike = city_trend_major %>% filter(quarter == "2022Q4") %>% select(city, total_patients, population, patients_per_100k)
city_health = read.csv("../texas_cityhealth.csv") %>% pivot_wider(names_from = Metric, values_from = Value) # 2022
library(dplyr)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(patchwork)
library(corrplot)
library(mosaic)
city_trend_major = read.csv("../texas_city_trend_major.csv")
colnames(city_trend_major) = c("city", "year", "quarter", "total_patients", "population", "patients_per_100k")
first_spike = city_trend_major %>% filter(quarter == "2022Q4") %>% select(city, total_patients, population, patients_per_100k)
city_health = read.csv("../texas_cityhealth.csv") %>% pivot_wider(names_from = Metric, values_from = Value) # 2022
colnames(city_health)[1] = "city"
flu_vax = read.csv("../texas_flu_vax.csv") # 2022
first_spike = first_spike %>% left_join(city_health) %>% left_join(flu_vax[,2:3])
View(first_spike)
View(first_spike)
weather = read.csv("../texas_weather.csv")
View(weather)
View(weather)
weather = read.csv("../texas_weather.csv") %>% filter(year == 2022)
weather = read.csv("../texas_weather.csv") %>% filter(year == 2022) %>% arrange(desc(county))
weather = read.csv("../texas_weather.csv") %>% filter(year == 2022) %>% arrange(county)
corresponding_cities = c(
"San Antonio",       # Bexar County
"Dallas",            # Dallas County
"El Paso",           # El Paso County
"Houston",           # Harris County
"Corpus Christi",    # Nueces County
"Fort Worth & Arlington", # Tarrant County
"Austin"             # Travis County
)
weather = read.csv("../texas_weather.csv") %>% filter(year == 2022) %>% arrange(county)
weather$city = corresponding_cities
corresponding_cities = c(
"San Antonio",       # Bexar County
"Dallas",            # Dallas County
"El Paso",           # El Paso County
"Houston",           # Harris County
"Corpus Christi",    # Nueces County
"Fort Worth & Arlington", # Tarrant County
"Austin"             # Travis County
)
weather[8] = weather[7]
weather %>% rbind(weather[6])
weather %>% rbind(weather[6,])
weather = weather %>% rbind(weather[6,])
weather$city = corresponding_cities
corresponding_cities = c(
"San Antonio",       # Bexar County
"Dallas",            # Dallas County
"El Paso",           # El Paso County
"Houston",           # Harris County
"Corpus Christi",    # Nueces County
"Fort Worth", # Tarrant County
"Austin",          # Travis County
"Arlington" # Tarrant County again
)
weather$city = corresponding_cities
first_spike %>% left_join(weather)
first_spike %>% left_join(weather[,c(2,4)])
weather = read.csv("../texas_weather.csv") %>% filter(year == 2022) %>% arrange(county)
weather = weather %>% rbind(weather[6,])
weather$city = corresponding_cities
corresponding_cities = c(
"San Antonio",       # Bexar County
"Dallas",            # Dallas County
"El Paso",           # El Paso County
"Houston",           # Harris County
"Corpus Christi",    # Nueces County
"Fort Worth", # Tarrant County
"Austin",          # Travis County
"Arlington" # Tarrant County again
)
first_spike %>% left_join(weather[,c(2,4)])
first_spike = first_spike %>% left_join(weather[,c(2,4)])
first_spike %>% left_join(weather[,c(2,4)])
numeric_data = first_spike[sapply(first_spike, is.numeric)]
cor_matrix = cor(numeric_data)
corrplot.mixed(cor_matrix, tl.col = "black", tl.pos = "lt", addgrid.col = TRUE, upper="color", lower="number", diag="l")
knitr::opts_chunk$set(fig.height=8, fig.width=8, fig.align = "center", warning=FALSE, echo=FALSE, tidy=TRUE, tidy.opts=list(width.cutoff=60))
library(dplyr)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(patchwork)
library(corrplot)
library(mosaic)
city_trend_major = read.csv("../texas_city_trend_major.csv")
colnames(city_trend_major) = c("city", "year", "quarter", "total_patients", "population", "patients_per_100k")
first_spike = city_trend_major %>% filter(quarter == "2022Q4") %>% select(city, total_patients, population, patients_per_100k)
city_health = read.csv("../texas_cityhealth.csv") %>% pivot_wider(names_from = Metric, values_from = Value) # 2022
colnames(city_health)[1] = "city"
flu_vax = read.csv("../texas_flu_vax.csv") # 2022
first_spike = first_spike %>% left_join(city_health) %>% left_join(flu_vax[,2:3])
weather = read.csv("../texas_weather.csv") %>% filter(year == 2022) %>% arrange(county)
weather = weather %>% rbind(weather[6,])
weather$city = corresponding_cities
corresponding_cities = c(
"San Antonio",       # Bexar County
"Dallas",            # Dallas County
"El Paso",           # El Paso County
"Houston",           # Harris County
"Corpus Christi",    # Nueces County
"Fort Worth", # Tarrant County
"Austin",          # Travis County
"Arlington" # Tarrant County again
)
first_spike = first_spike %>% left_join(weather[,c(2,4)])
texas_svi = read.csv("../texas_svi.csv")
counties = c("Harris County", "Bexar County", "Dallas County", "Travis County", "Tarrant County", "El Paso County", "Tarrant County", "Nueces County")
corresponding_cities = c(
"San Antonio",       # Bexar County
"Dallas",            # Dallas County
"El Paso",           # El Paso County
"Houston",           # Harris County
"Corpus Christi",    # Nueces County
"Fort Worth & Arlington", # Tarrant County
"Austin"             # Travis County
)
texas_svi_major = texas_svi %>% filter(COUNTY %in% counties) %>% select(COUNTY, RPL_THEMES) %>% add_column(City = corresponding_cities, .before = 2) %>% arrange((RPL_THEMES))
texas_svi_major %>% arrange(county)
View(texas_svi_major)
View(texas_svi_major)
texas_svi_major %>% arrange(COUNTY)
texas_svi_major = texas_svi_major %>% rbind(texas_svi_major[6,])
texas_svi_major %>% arrange(COUNTY)
texas_svi_major = texas_svi_major %>% arrange(COUNTY)
texas_svi_major = texas_svi_major %>% rbind(texas_svi_major[6,])
texas_svi = read.csv("../texas_svi.csv")
counties = c("Harris County", "Bexar County", "Dallas County", "Travis County", "Tarrant County", "El Paso County", "Tarrant County", "Nueces County")
corresponding_cities = c(
"San Antonio",       # Bexar County
"Dallas",            # Dallas County
"El Paso",           # El Paso County
"Houston",           # Harris County
"Corpus Christi",    # Nueces County
"Fort Worth & Arlington", # Tarrant County
"Austin"             # Travis County
)
texas_svi_major = texas_svi %>% filter(COUNTY %in% counties) %>% select(COUNTY, RPL_THEMES) %>% add_column(City = corresponding_cities, .before = 2) %>% arrange((RPL_THEMES))
texas_svi_major = texas_svi_major %>% arrange(COUNTY)
texas_svi_major = texas_svi_major %>% rbind(texas_svi_major[6,])
texas_svi_major$city = corresponding_cities
corresponding_cities = c(
"San Antonio",       # Bexar County
"Dallas",            # Dallas County
"El Paso",           # El Paso County
"Houston",           # Harris County
"Corpus Christi",    # Nueces County
"Fort Worth & Arlington", # Tarrant County
"Austin"             # Travis County
)
corresponding_cities = c(
"San Antonio",       # Bexar County
"Dallas",            # Dallas County
"El Paso",           # El Paso County
"Houston",           # Harris County
"Corpus Christi",    # Nueces County
"Fort Worth", # Tarrant County
"Austin",          # Travis County
"Arlington" # Tarrant County again
)
texas_svi_major$city = corresponding_cities
texas_svi_major = texas_svi_major[,3:4]
colnames(texas_svi_major)[1] = "svi_percentile"
first_spike = first_spike %>% left_join(texas_svi_major)
numeric_data = first_spike[sapply(first_spike, is.numeric)]
cor_matrix = cor(numeric_data)
corrplot.mixed(cor_matrix, tl.col = "black", tl.pos = "lt", addgrid.col = TRUE, upper="color", lower="number", diag="l")
hospitals = read.csv("../COVID-19_Reported_Patient_Impact_and_Hospital_Capacity_by_Facility.csv")
hospitals = hospitals[hospitals$state=="TX",] %>% mutate(city = str_to_title(city))
hospitals_major = hospitals %>% filter(city %in% major_cities) %>% mutate(city = factor(city, levels = major_cities))
hospitals_major = hospitals %>% filter(city %in% major_cities) %>% mutate(city = factor(city, levels = major_cities))
# Focus on major cities
major_cities = c("Houston", "San Antonio", "Dallas", "Austin", "Fort Worth", "El Paso", "Arlington", "Corpus Christi")
```{r, fig.height=4, fig.width=10}
major_cities = c("Houston", "San Antonio", "Dallas", "Austin", "Fort Worth", "El Paso", "Arlington", "Corpus Christi")
hospitals_major = hospitals %>% filter(city %in% major_cities) %>% mutate(city = factor(city, levels = major_cities))
desired_columns = c("hospital_pk", "collection_week", "hospital_name", "city", "hospital_subtype", "total_beds_7_day_avg", "total_patients_hospitalized_confirmed_influenza_7_day_sum", "total_patients_hospitalized_confirmed_influenza_7_day_avg")
hospitals_major_by = hospitals_major %>%
select(all_of(desired_columns)) %>%
rename(
id = hospital_pk,
week = collection_week,
name = hospital_name,
city = city,
subtype = hospital_subtype,
beds_avg = total_beds_7_day_avg,
flu_sum = total_patients_hospitalized_confirmed_influenza_7_day_sum,
flu_avg = total_patients_hospitalized_confirmed_influenza_7_day_avg)
hospitals_major_by = hospitals_major_by %>% mutate(across(c(beds_avg, flu_sum, flu_avg), ~ifelse(. <= 0, NA, .)))
ggplot(hospitals_major_by %>% filter(!is.na(flu_avg))) +
geom_histogram(aes(x = flu_avg, fill=city), bins=30) + facet_wrap(~city, nrow=2)
ggplot(hospitals_major_by %>% filter(!is.na(flu_sum))) +
geom_histogram(aes(x = flu_sum, fill=city), bins=30) + facet_wrap(~city, nrow=2)
ggplot(hospitals_major_by %>% filter(!is.na(beds_avg))) +
geom_histogram(aes(x = beds_avg, fill=city), bins=30) + facet_wrap(~city, nrow=2)
hospitals_by_year = hospitals_major_by %>%
mutate(year = year(week)) %>%  # Extract year from date column
group_by(id, year, name, city) %>%
summarise(
beds_avg = mean(beds_avg, na.rm = TRUE),
flu_sum = mean(flu_sum, na.rm = TRUE),
flu_avg = mean(flu_avg, na.rm = TRUE),
entries = n(),
.groups = "drop"
)
View(hospitals_by_year)
View(hospitals_by_year)
View(hospitals_by_year)
View(hospitals_by_year)
# Step 1: Add quarter column
hospitals_major_by_q = hospitals_major_by %>%
mutate(
week = as.Date(week),
quarter = paste0(year(week), " Q", quarter(week))
)
# Step 2: Aggregate total beds by city and quarter
beds_by_city_quarter = hospitals_major_by_q %>%
group_by(city, quarter) %>%
summarise(total_beds = sum(beds_avg, na.rm = TRUE), .groups = "drop")
# Optional: make quarter a factor ordered chronologically
beds_by_city_quarter = beds_by_city_quarter %>%
mutate(quarter = factor(quarter, levels = unique(quarter)))
# Step 3: Plot
ggplot(beds_by_city_quarter, aes(x = quarter, y = total_beds, color = city, group = city)) +
geom_line(size = 1) +
geom_point() +
theme_minimal() +
labs(
title = "Total Beds by City and Quarter",
x = "Quarter",
y = "Total Beds"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + facet_wrap(~city, ncol=2)
# Step 1: Add quarter column
hospitals_major_by_q = hospitals_major_by %>%
mutate(
week = as.Date(week),
year = year(week)
)
# Step 2: Aggregate total beds by city and quarter
beds_by_city_quarter = hospitals_major_by_q %>%
group_by(city, year) %>%
summarise(total_beds = sum(beds_avg, na.rm = TRUE), .groups = "drop")
# Step 3: Plot
ggplot(beds_by_city_quarter, aes(x = year, y = total_beds, color = city, group = city)) +
geom_line(size = 1) +
geom_point() +
theme_minimal() +
labs(
title = "Total Beds by City and Quarter",
x = "Quarter",
y = "Total Beds"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + facet_wrap(~city, ncol=2)
hospitals = read.csv("../COVID-19_Reported_Patient_Impact_and_Hospital_Capacity_by_Facility.csv")
hospitals = hospitals[hospitals$state=="TX",] %>% mutate(city = str_to_title(city))
major_cities = c("Houston", "San Antonio", "Dallas", "Austin", "Fort Worth", "El Paso", "Arlington", "Corpus Christi")
hospitals_major = hospitals %>% filter(city %in% major_cities) %>% mutate(city = factor(city, levels = major_cities))
desired_columns = c("hospital_pk", "collection_week", "hospital_name", "city", "hospital_subtype", "total_beds_7_day_avg", "total_patients_hospitalized_confirmed_influenza_7_day_sum", "total_patients_hospitalized_confirmed_influenza_7_day_avg")
hospitals_major = hospitals_major %>%
select(all_of(desired_columns)) %>%
rename(
id = hospital_pk,
week = collection_week,
name = hospital_name,
city = city,
subtype = hospital_subtype,
beds_avg = total_beds_7_day_avg,
flu_sum = total_patients_hospitalized_confirmed_influenza_7_day_sum,
flu_avg = total_patients_hospitalized_confirmed_influenza_7_day_avg)
hospitals_major = hospitals_major %>% mutate(across(c(beds_avg, flu_sum, flu_avg), ~ifelse(. <= 0, NA, .)))
weekly_city_data = hospitals_major %>% drop_na(beds_avg) %>% mutate(week = as.Date(week)) %>% group_by(city, week) %>% summarize(total_beds = sum(beds_avg), .groups = "drop")
regular = ggplot(weekly_city_data, aes(x = week, y = total_beds)) + geom_line() + geom_smooth(color = "red", se = FALSE) + facet_wrap(~ city, nrow=8) +
labs(title = "Hospital Beds by City over Time", x = "Year", y= "Beds")
weekly_city_data = hospitals_major %>% drop_na(beds_avg) %>% mutate(week = as.Date(week)) %>% group_by(city, week) %>% summarize(total_beds = sum(beds_avg), .groups = "drop")
# gotta clean up this data
city_pop = read.csv("../texas_city_pop.csv")
city_pop = city_pop[c(3:1233), c(1, 3:6)]
names(city_pop) = as.character(city_pop[1, ])
names(city_pop)[1] = "City"
city_pop = city_pop[-1, ]
city_pop = city_pop[c(52, 270, 44, 237, 340, 972, 497, 376),]
city_pop$City = c("Austin", "Dallas", "Arlington", "Corpus Christi", "El Paso", "San Antonio", "Houston", "Fort Worth")
city_pop = city_pop %>%  mutate(across(2:5, ~ as.numeric(gsub("[^0-9.-]", "", .)))) %>% arrange(desc(1))
city_pop_long = city_pop %>% pivot_longer(-City, names_to = "year", values_to = "population") %>% mutate(year = as.integer(year))
weekly_city_data_norm = weekly_city_data %>% mutate(year = as.integer(format(week, "%Y"))) %>% left_join(city_pop_long, by = c("city" = "City", "year" = "year")) %>%
mutate(beds_per_100k = total_beds / population * 100000) %>% mutate(city = factor(city, levels = major_cities))
ggplot(weekly_city_data_norm, aes(x = week, y = beds_per_100k)) + geom_line() + geom_smooth() + facet_wrap(~ city, nrow=8) +
labs(title = "Hospital Beds per 100,000 by City over Time", x = "Year", y= "Beds per 100,000")
View(weekly_city_data_norm)
View(weekly_city_data_norm)
head(weekly_city_data_norm)
avg_beds_2022 <- weekly_city_data_norm %>%
filter(year == 2022) %>%
group_by(city) %>%
summarize(avg_beds_per_100k = mean(beds_per_100k, na.rm = TRUE))
View(avg_beds_2022)
View(avg_beds_2022)
first_spike %>% left_join(avg_beds_2022)
knitr::opts_chunk$set(fig.height=8, fig.width=8, fig.align = "center", warning=FALSE, echo=FALSE, tidy=TRUE, tidy.opts=list(width.cutoff=60))
library(dplyr)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(patchwork)
library(corrplot)
library(mosaic)
city_trend_major = read.csv("../texas_city_trend_major.csv")
colnames(city_trend_major) = c("city", "year", "quarter", "total_patients", "population", "patients_per_100k")
first_spike = city_trend_major %>% filter(quarter == "2022Q4") %>% select(city, total_patients, population, patients_per_100k)
city_health = read.csv("../texas_cityhealth.csv") %>% pivot_wider(names_from = Metric, values_from = Value) # 2022
colnames(city_health)[1] = "city"
flu_vax = read.csv("../texas_flu_vax.csv") # 2022
first_spike = first_spike %>% left_join(city_health) %>% left_join(flu_vax[,2:3])
weather = read.csv("../texas_weather.csv") %>% filter(year == 2022) %>% arrange(county)
weather = weather %>% rbind(weather[6,])
weather$city = corresponding_cities
first_spike %>% left_join(avg_beds_2022)
first_spike = first_spike %>% left_join(avg_beds_2022)
numeric_data = first_spike[sapply(first_spike, is.numeric)]
cor_matrix = cor(numeric_data)
corrplot.mixed(cor_matrix, tl.col = "black", tl.pos = "lt", addgrid.col = TRUE, upper="color", lower="number", diag="l")
tinytex::install_tinytex()
knitr::opts_chunk$set(fig.height=8, fig.width=8, fig.align = "center", warning=FALSE, echo=FALSE, tidy=TRUE, tidy.opts=list(width.cutoff=60))
library(dplyr)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(patchwork)
library(corrplot)
library(mosaic)
city_trend_major = read.csv("../texas_city_trend_major.csv")
colnames(city_trend_major) = c("city", "year", "quarter", "total_patients", "population", "patients_per_100k")
first_spike = city_trend_major %>% filter(quarter == "2022Q4") %>% select(city, total_patients, population, patients_per_100k)
city_health = read.csv("../texas_cityhealth.csv") %>% pivot_wider(names_from = Metric, values_from = Value) # 2022
colnames(city_health)[1] = "city"
flu_vax = read.csv("../texas_flu_vax.csv") # 2022
first_spike = first_spike %>% left_join(city_health) %>% left_join(flu_vax[,2:3])
corresponding_cities = c(
"San Antonio",       # Bexar County
"Dallas",            # Dallas County
"El Paso",           # El Paso County
"Houston",           # Harris County
"Corpus Christi",    # Nueces County
"Fort Worth", # Tarrant County
"Austin",          # Travis County
"Arlington" # Tarrant County again
)
weather = read.csv("../texas_weather.csv") %>% filter(year == 2022) %>% arrange(county)
weather = weather %>% rbind(weather[6,])
weather$city = corresponding_cities
first_spike = first_spike %>% left_join(weather[,c(2,4)])
texas_svi = read.csv("../texas_svi.csv")
counties = c("Harris County", "Bexar County", "Dallas County", "Travis County", "Tarrant County", "El Paso County", "Tarrant County", "Nueces County")
texas_svi_major = texas_svi %>% filter(COUNTY %in% counties) %>% select(COUNTY, RPL_THEMES) %>% add_column(City = corresponding_cities, .before = 2) %>% arrange((RPL_THEMES))
texas_svi = read.csv("../texas_svi.csv")
counties = c("Harris County", "Bexar County", "Dallas County", "Travis County", "Tarrant County", "El Paso County", "Tarrant County", "Nueces County")
texas_svi_major = texas_svi %>% filter(COUNTY %in% counties) %>% select(COUNTY, RPL_THEMES) %>% add_column(City = c(1:7), .before = 2) %>% arrange((RPL_THEMES))
texas_svi_major = texas_svi_major %>% arrange(COUNTY)
texas_svi_major = texas_svi_major %>% rbind(texas_svi_major[6,])
texas_svi_major$city = corresponding_cities
texas_svi_major = texas_svi_major[,3:4]
colnames(texas_svi_major)[1] = "svi_percentile"
first_spike = first_spike %>% left_join(texas_svi_major)
View(first_spike)
View(first_spike)
View(texas_svi_major)
View(texas_svi_major)
View(first_spike)
View(first_spike)
major_cities = c("Houston", "San Antonio", "Dallas", "Austin", "Fort Worth", "El Paso", "Arlington", "Corpus Christi")
hospitals_major = hospitals %>% filter(city %in% major_cities) %>% mutate(city = factor(city, levels = major_cities))
numeric_data = first_spike[sapply(first_spike, is.numeric)]
cor_matrix = cor(numeric_data)
corrplot.mixed(cor_matrix, tl.col = "black", tl.pos = "lt", addgrid.col = TRUE, upper="color", lower="number", diag="l")
